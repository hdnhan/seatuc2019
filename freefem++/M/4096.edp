load "ff-IpOpt"
load "msh3"
load "medit"


int Nt = 4096;
int Nx = 32, Ny = Nx;
real T = 0.1;
real hx = 1.0/Nx, hy = 1.0/Ny, ht = T/Nt;
real b = -sqrt(5);

mesh Th2 = square(Nx, Ny);
fespace Vh2(Th2, P1);

mesh3 Th3 = cube(Nx, Ny, Nt, [x, y, T * z]);
fespace Vh3(Th3, P1);

macro grad(u) [dx(u), dy(u)]//

// Data
Vh3 wb = exp(b * pi^2 * z) * sin(pi * x) * sin(pi * y);
Vh3 f = -pi^4 * wb(x, y, T);
Vh3 uhat = (b^2 - 5)/(2 + b) * pi^2 * wb(x, y, z) + 2 * pi^2 * wb(x, y, T);

Vh3 qbar = -pi^4 * (wb(x, y, z) - wb(x, y, T));
Vh3 ubar = -1/(2 + b) * pi^2 * wb(x, y, z);
Vh3 zbar = wb(x, y, z) - wb(x, y, T);

real gamma = pi^(-4);

Vh2 u0 = ubar(x, y, 0);

// State equation:
func real[int] StateProblem(real[int] q){
	Vh3 u3, q3; q3[] = q;
	Vh3 rhs = q3 + f;
    Vh2 u, v, Fprev, Fnext;
    Vh2 uprev = u0;

    for(int ny = 0; ny <= Ny; ny++){
		for(int nx = 0; nx <= Nx; nx++){
			Fprev[][ny * (Nx + 1) + nx] = rhs[][ny * (Nx + 1) + nx];
			u3[][ny * (Nx + 1) + nx] = uprev[][ny * (Nx + 1) + nx];
		}
	}

    for(int nt = 1; nt <= Nt; nt++){

		for(int ny = 0; ny <= Ny; ny++){
			for(int nx = 0; nx <= Nx; nx++){
				Fnext[][ny * (Nx + 1) + nx] = rhs[][nt * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx];
			}
		}
	
		solve CrankNicolson(u, v, solver = CG) = 
			  int2d(Th2)(u * v / ht + 0.5 * grad(u)' * grad(v))
			+ int2d(Th2)(-uprev * v / ht + 0.5 * grad(uprev)' * grad(v))
			- int2d(Th2)(0.5 * (Fprev + Fnext) * v) 
			+ on(1, 2, 3, 4, u = 0);

		for(int ny = 0; ny <= Ny; ny++){
			for(int nx = 0; nx <= Nx; nx++){
				u3[][nt * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx] = u[][ny * (Nx + 1) + nx];
			}
		}

		Fprev = Fnext;
		uprev = u;
	}

	return u3[];
}



// Adjoint equation
func real[int] AdjointProblem(real[int] u){

    Vh3 z3;
    Vh3 rhs; rhs[] = u - uhat[];

    Vh2 z, v, Fprev, Fnext;
    Vh2 zprev = 0;

    for(int ny = 0; ny <= Ny; ny++){
		for(int nx = 0; nx <= Nx; nx++){
			Fprev[][ny * (Nx + 1) + nx] = rhs[][Nt * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx];
			z3[][Nt * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx] = zprev[][ny * (Nx + 1) + nx];
		}
	}

    for(int nt = 1; nt <= Nt; nt++){

		for(int ny = 0; ny <= Ny; ny++){
			for(int nx = 0; nx <= Nx; nx++){
				Fnext[][ny * (Nx + 1) + nx] = rhs[][(Nt - nt) * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx];
			}
		}
	
		solve CrankNicolson(z, v, solver = CG) = 
			  int2d(Th2)(z * v / ht + 0.5 * grad(z)' * grad(v))
			+ int2d(Th2)(-zprev * v / ht + 0.5 * grad(zprev)' * grad(v))
			- int2d(Th2)(0.5 * (Fprev + Fnext) * v) 
			+ on(1, 2, 3, 4, z = 0);

		for(int ny = 0; ny <= Ny; ny++){
			for(int nx = 0; nx <= Nx; nx++){
				z3[][(Nt - nt) * (Nx + 1) * (Ny + 1) + ny * (Nx + 1) + nx] = z[][ny * (Nx + 1) + nx];
			}
		}

		Fprev = Fnext;
		zprev = z;
	}

	return z3[];
}


// Tikhonov functional
func real J(real[int] q) {
    Vh3 q3; q3[] = q;
    Vh3 u; u[] = StateProblem(q); 
    Vh3 del; del[] = u[] - uhat[];
    return 0.5 * int3d(Th3)(del * del) + 0.5 * gamma * int3d(Th3)(q3 * q3);
}


// Gradient of Tikhonov funtional
func real[int] GradJ(real[int] q) {
    Vh3 z; z[] = AdjointProblem(StateProblem(q));
    real[int] res = z[] + gamma * q;
    return res;
}



Vh3 qh = 0;
//IPOPT(J, GradJ, qh[], tol = 1e-6);
IPOPT(J, GradJ, qh[]);

Vh3 uh; uh[] = StateProblem(qh[]);
Vh3 zh; zh[] = AdjointProblem(uh[]);

cout << "q: " << sqrt(int3d(Th3)((qh - qbar) * (qh - qbar))) << endl;
cout << "u: " << sqrt(int3d(Th3)((uh - ubar) * (uh - ubar))) << endl;
cout << "z: " << sqrt(int3d(Th3)((zh - zbar) * (zh - zbar))) << endl;



/*
//Vh3 uap; uap[] = StateProblem(qbar[]);
//Vh3 del = uap - ubar;

Vh3 zap; zap[] = AdjointProblem(ubar[]);
Vh3 del = zap - zbar;

//Vh3 del; del[] = AdjointProblem(haha[]) - ue[]; //uap - ue;
cout << "del min and max: " << del[].min << ", " << del[].max << endl;
cout << "erorr L2: " << sqrt(int3d(Th3)(del * del)) << endl;
*/